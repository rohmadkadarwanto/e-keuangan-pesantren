<%- include('../../partials/header') %>
<div class="content-wrapper">
  <div class="content-header">
    <div class="container">
      <div class="row mb-2">
        <div class="col-sm-6">
          <h1 class="m-0">Data Akun Keuangan</h1>
        </div>
        <div class="col-sm-6">
          <div class="float-sm-right">
            <button class="btn btn-success" onclick="showNewAkunForm()">Tambah Akun</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <section class="content">
    <div class="container">

      <!-- List Akun Keuangan -->
      <div id="akunList" class="card">
        <div class="card-header">
          <h3 class="card-title">
            <i class="fas fa-users mr-1"></i>
            Daftar Akun
          </h3>
        </div>
        <div class="card-body">
          <table class="table table-responsive">
            <thead>
              <tr>
                <th>Kode Akun</th>
                <th>Kode Nasabah</th>
                <th>Nama Akun</th>
                <th>Saldo Awal</th>
                <th>Saldo Akhir</th>
                <th>Tipe Transaksi</th>
                <th>Aksi</th>
              </tr>
            </thead>
            <tbody>
              <!-- Data will be loaded dynamically here -->
            </tbody>
          </table>
        </div>
      </div>

      <!-- Create/Edit Form -->
      <div id="akunForm" style="display: none;" class="card">
        <div class="card-body">
          <form>
            <div class="form-group">
              <label for="kode_akun">Kode Akun:</label>
              <input type="text" class="form-control" id="kode_akun" name="kode_akun" required>
            </div>
            <div class="form-group">
              <label for="kode_entitas">Nasabah:</label>
              <select class="form-control" id="kode_entitas" name="kode_entitas" required data-error="Pilih kode entitas">
              </select>
            </div>
            <div class="form-group">
              <label for="nama_akun">Nama Akun:</label>
              <input type="text" class="form-control" id="nama_akun" name="nama_akun" required>
            </div>
            <div class="form-group">
              <label for="saldo_awal">Saldo Awal:</label>
              <input type="text" class="form-control" id="saldo_awal" name="saldo_awal" required>
            </div>
            <div class="form-group">
              <label for="tipe_transaksi">Tipe Transaksi:</label>
              <select class="form-control" id="tipe_transaksi" name="tipe_transaksi" required data-error="Pilih tipe transaksi">
              </select>
            </div>


            <input type="hidden" id="keykode_akun" name="keykode_akun">


            <button type="button" class="btn btn-primary" onclick="saveAkun()">Save</button>
            <button type="button" class="btn btn-danger" onclick="cancelAkunForm()">Cancel</button>
          </form>
        </div>
      </div>

      <!-- Detail Form -->
      <div id="akunDetail" style="display: none;" class="card">
        <div class="card-body">
          <ul class="list-group">
            <li class="list-group-item">
              <strong>Kode Akun:</strong> <span id="detail_kode_akun">Loading</span>
            </li>
            <li class="list-group-item">
              <strong>Nasabah:</strong> <span id="detail_kode_entitas">Loading</span>
            </li>
            <li class="list-group-item">
              <strong>Nama Akun:</strong> <span id="detail_nama_akun">Loading</span>
            </li>
            <li class="list-group-item">
              <strong>Saldo Awal:</strong> <span id="detail_saldo_awal">Loading</span>
            </li>
            <li class="list-group-item">
              <strong>Saldo Akhir:</strong> <span id="detail_saldo_akhir">Loading</span>
            </li>
            <li class="list-group-item">
              <strong>Tipe Transaksi:</strong> <span id="detail_tipe_transaksi">Loading</span>
            </li>
          </ul>
          <button class="btn btn-success mt-3" onclick="cancelAkunDetail()">Kembali</button>
        </div>
      </div>

    </div>
  </section>
</div>
  <script>
    const endpoint = "/api/akun-keuangan";

    document.addEventListener('DOMContentLoaded', () => {
      fetchAkunList();
    });




    async function fetchAkunList() {
      try {
        const response = await fetch(endpoint);
        const data = await response.json();
        displayAkunList(data);
      } catch (error) {
        console.error('Error fetching akun keuangan list:', error);
      }
    }


    // Function to populate the Kode Entitas dropdown
    function populateKodeEntitasDropdown(entitasList) {
      const dropdown = document.getElementById("kode_entitas");

      // Clear existing options
      dropdown.innerHTML = "";

      // Add a default option
      const defaultOption = document.createElement("option");
      defaultOption.value = "";
      defaultOption.text = "Pilih Kode Entitas";
      defaultOption.selected = true;
      defaultOption.disabled = true;
      dropdown.appendChild(defaultOption);

      // Add options from the entitasList
      entitasList.forEach(entitas => {
        const option = document.createElement("option");
        option.value = entitas.kode_entitas;
        option.text = entitas.kode_entitas;
        dropdown.appendChild(option);
      });

    }



    async function fetchEntitasDropdown() {
      try {
        const response = await fetch(endpointEntitas);
        const data = await response.json();
        const dropdown = document.getElementById("kode_entitas");
        // Clear existing options
        dropdown.innerHTML = "";
        tipeEntitasOptions = [
          { value: "", text: "Pilih Nasabah", selected: true, disabled: true },
          ...data.map(entitas => ({ value: entitas.kode_entitas, text: entitas.nama_entitas }))
        ];

        // Add options from the entitasList
        tipeEntitasOptions.forEach(entitas => {
          const option = document.createElement("option");
          option.value = entitas.value;
          option.text = entitas.text;
          dropdown.appendChild(option);
        });

        //populateKodeEntitasDropdown(data);
      } catch (error) {
        console.error('Error fetching entitas dropdown:', error);
      }
    }

    function displayAkunList(akunList) {
      const tbody = document.querySelector('#akunList tbody');
      tbody.innerHTML = '';

      akunList.forEach(akun => {
        const row = `
          <tr>
            <td>${akun.kode_akun}</td>
            <td>${akun.kode_entitas}</td>
            <td>${akun.nama_akun}</td>
            <td>${formatRupiah(akun.saldo_awal)}</td>
            <td>${formatRupiah(akun.saldo)}</td>
            <td>${getTipeTransaksiText(akun.tipe_transaksi)}</td>
            <td>
              <button class="btn btn-light btn-sm" onclick="detailAkun('${akun.kode_akun}')">Detail</button>
              <button class="btn btn-info btn-sm" onclick="editAkun('${akun.kode_akun}')">Edit</button>
              <button class="btn btn-danger btn-sm" onclick="deleteAkun('${akun.kode_akun}')">Delete</button>
            </td>
          </tr>
        `;
        tbody.innerHTML += row;
      });
    }

    function showNewAkunForm() {
      resetAkunForm();
      showAkunForm();
      fetchEntitasDropdown();
      populateTipeTransaksiDropdown();


      const timestamp = new Date().toISOString().replace(/[^0-9]/g, '');
      const kode_akun = `REK${timestamp}`;

      document.getElementById('kode_akun').value = kode_akun;

    }

    function resetAkunForm() {
      const formElements = ['kode_akun', 'kode_entitas', 'nama_akun', 'saldo_awal', 'tipe_transaksi','keykode_akun'];
      formElements.forEach(element => {
        document.getElementById(element).value = '';
      });
    }

    function showAkunForm() {
      document.getElementById('akunForm').style.display = 'block';
      document.getElementById('akunList').style.display = 'none';
    }

    function cancelAkunForm() {
      document.getElementById('akunForm').style.display = 'none';
      document.getElementById('akunList').style.display = 'block';
    }

    async function saveAkun() {
      const loadingOverlay = showLoadingOverlay(); // Menampilkan overlay loading

      try {
        const formData = {
          kode_akun: document.getElementById('kode_akun').value,
          kode_entitas: document.getElementById('kode_entitas').value,
          nama_akun: document.getElementById('nama_akun').value,
          saldo_awal: document.getElementById('saldo_awal').value,
          tipe_transaksi: document.getElementById('tipe_transaksi').value,
        };

        const akunId = document.getElementById('keykode_akun').value;

        if (akunId) {
          const response = await fetch(endpoint + `/${akunId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
          });
          const data = await response.json();
          console.log('Akun updated successfully:', data);
          showAlert('success', 'Akun updated successfully');
        } else {
          const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData),
          });
          const data = await response.json();
          console.log('Akun created successfully:', data);
          showAlert('success', 'Akun created successfully');
        }

        fetchAkunList();
        cancelAkunForm();
      } catch (error) {
        console.error('Error saving akun:', error);
        showAlert('error', 'Error saving akun');
      } finally {
        hideLoadingOverlay(loadingOverlay); // Menyembunyikan overlay loading
      }
    }


    async function deleteAkun(id) {
      if (await showConfirm('Are you sure you want to delete this akun?')) {
        const loadingOverlay = showLoadingOverlay(); // Menampilkan overlay loading

        try {
          const response = await fetch(endpoint + `/${id}`, {
            method: 'DELETE',
          });
          const data = await response.json();
          console.log('Akun deleted successfully:', data);
          //fetchAkunList();
          showAlert('success', 'Akun deleted successfully');
        } catch (error) {
          console.error('Error deleting akun:', error);
          showAlert('error', 'Error deleting akun');
        } finally {
          hideLoadingOverlay(loadingOverlay); // Menyembunyikan overlay loading
          fetchAkunList();
        }
      }
    }



    function editAkun(id) {
      fetch(`${endpoint}/${id}`)
        .then(response => response.json())
        .then(data => {
          populateAkunForm(data);
          showAkunForm();
        })
        .catch(error => {
          console.error('Error fetching akun details:', error);
        });
    }

    function detailAkun(id) {
      fetch(`${endpoint}/${id}`)
        .then(response => response.json())
        .then(data => {
          showAkunDetail();
          populateAkunDetail(data);
        })
        .catch(error => {
          console.error('Error fetching akun details:', error);
        });
    }

    function showAkunDetail() {
      document.getElementById('akunDetail').style.display = 'block';
      document.getElementById('akunList').style.display = 'none';
    }

    function cancelAkunDetail() {
      document.getElementById('akunDetail').style.display = 'none';
      document.getElementById('akunList').style.display = 'block';
    }

    function populateAkunForm(data) {
      document.getElementById('kode_akun').value = data.kode_akun;
      document.getElementById('kode_entitas').value = data.kode_entitas;
      document.getElementById('nama_akun').value = data.nama_akun;
      document.getElementById('saldo_awal').value = data.saldo_awal;

      document.getElementById('keykode_akun').value = data.kode_akun;

      populateTipeTransaksiDropdown();

      const tipeTransaksiDropdown = document.getElementById('tipe_transaksi');
      for (let i = 0; i < tipeTransaksiDropdown.options.length; i++) {
        if (tipeTransaksiDropdown.options[i].value === data.tipe_transaksi) {
          tipeTransaksiDropdown.options[i].selected = true;
          break;
        }
      }


      // Populate Kode Entitas Dropdown
      const kodeEntitasDropdown = document.getElementById('kode_entitas');
      for (let i = 0; i < kodeEntitasDropdown.options.length; i++) {
        if (kodeEntitasDropdown.options[i].value === data.kode_entitas) {
          kodeEntitasDropdown.options[i].selected = true;
          break;
        }
      }

    }

    function populateAkunDetail(data) {
      document.getElementById('detail_kode_akun').innerText = data.kode_akun;
      document.getElementById('detail_kode_entitas').innerText = data.kode_entitas;
      document.getElementById('detail_nama_akun').innerText = data.nama_akun;
      document.getElementById('detail_saldo_awal').innerText = formatRupiah(data.saldo_awal);
      document.getElementById('detail_saldo_akhir').innerText = formatRupiah(data.saldo);
      document.getElementById('detail_tipe_transaksi').innerText = getTipeTransaksiText(data.tipe_transaksi);
    }







    function showAlert(type, message) {
      Swal.fire({
        icon: type,
        title: message,
        showConfirmButton: false,
        timer: 1500,
      });
    }

    async function showConfirm(message) {
      const result = await Swal.fire({
        icon: 'warning',
        title: 'Confirmation',
        text: message,
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!',
      });

      return result.isConfirmed;
    }

    function showLoadingOverlay() {
    const overlay = document.createElement('div');
    overlay.className = 'loading-overlay';
    document.body.appendChild(overlay);
    return overlay;
  }

  function hideLoadingOverlay(overlay) {
    if (overlay) {
      document.body.removeChild(overlay);
    }
  }

  </script>

<%- include('../../partials/footer') %>
